---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

const allArticles = await getCollection("articles");
const articles = allArticles
  .sort(
    (a: CollectionEntry<"articles">, b: CollectionEntry<"articles">) =>
      new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
  )
  .map((article: CollectionEntry<"articles">) => ({
    title: article.data.title,
    subtitle: article.data.subtitle,
    description: article.data.description,
    image: article.data.hero_image,
    link: article.data.path,
    date: new Date(article.data.date).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }),
  }));
---

<section class="font-['Red_Hat_Display_Variable'] py-12 sm:py-16 lg:py-20">
  <div class="max-w-[1400px] mx-auto px-4 sm:px-6 lg:px-12">
    <h2
      class="text-lg sm:text-xl lg:text-2xl font-medium font-['Red_Hat_Display_Variable'] text-brand-800 mb-8 sm:mb-12 lg:mb-16"
    >
      What I've written about recently..
    </h2>

    <div class="relative flex flex-row items center" id="blog-carousel">
      <button
        class="bg-white max-w-fit m-auto rounded-full p-2 shadow-md text-gray-600 hover:text-gray-900 transition-colors sm:block"
        id="prev-btn"
        aria-label="Previous slide"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 sm:h-6 sm:w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <div class="relative overflow-hidden w-full mx-4" id="carousel-viewport">
        <div
          class="flex gap-6 sm:gap-8 lg:gap-10 transition-transform duration-300 ease-in-out"
          id="carousel-container"
        >
          {
            articles.map((article) => (
              <div class="lg:max-w-[25%] md:max-w-[30%] max-w-[80%] flex-shrink-0 flex flex-col hover:-scale-[97%] transition-all">
                <a class="hover:cursor-pointer" href={article.link}>
                  <div class="aspect-square mb-3 sm:mb-4">
                    <Image
                      src={article.image}
                      alt={article.title}
                      width={500}
                      class="object-cover rounded-lg aspect-square"
                    />
                  </div>
                </a>
                <div class="flex flex-col h-full justify-between">
                  <a class="hover:cursor-pointer" href={article.link}>
                    <h3 class="text-lg sm:text-xl font-medium text-brand-800 mb-1 sm:mb-2 line-clamp-2 font-['Red_Hat_Display_Variable']">
                      {article.title}
                    </h3>
                  </a>
                  <div>
                    <p class="font-['Red_Hat_Display_Variable'] text-brand-400 mb-1 sm:mb-2 text-xs sm:text-sm">
                      {article.date}
                    </p>
                    <p class="font-['Red_Hat_Display_Variable'] text-brand-700 mb-3 sm:mb-4 font-light leading-relaxed text-sm sm:text-base line-clamp-3">
                      {article.description}
                    </p>
                    <a
                      href={article.link}
                      class="text-brand-700 font-['Montserrat_Variable'] hover:text-brand-900 hover:cursor-pointer font-medium text-sm sm:text-base inline-flex items-center gap-x-1"
                    >
                      Read article
                      <svg
                        width="17"
                        height="17"
                        viewBox="0 0 17 17"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M7.16602 11.8333L10.4993 8.49996L7.16602 5.16663"
                          stroke="#737FAE"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </a>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>

      <button
        class="bg-white max-w-fit m-auto rounded-full p-2 shadow-md text-gray-600 hover:text-gray-900 transition-colors sm:block"
        id="next-btn"
        aria-label="Next slide"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 sm:h-6 sm:w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
    <div class="flex justify-center gap-2 mt-6 sm:mt-8" id="carousel-dots">
    </div>
  </div>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    const carousel = document.getElementById("blog-carousel");
    const viewport = document.getElementById("carousel-viewport");
    const container = document.getElementById("carousel-container");
    const prevBtn = document.getElementById("prev-btn");
    const nextBtn = document.getElementById("next-btn");
    const dotsContainer = document.getElementById("carousel-dots");

    if (
      carousel &&
      container &&
      viewport &&
      prevBtn &&
      nextBtn &&
      dotsContainer
    ) {
      const eventHandlers: {
        prevBtn: (() => void) | null;
        nextBtn: (() => void) | null;
        dots: ((e: Event) => void) | null;
        resize: (() => void) | null;
      } = {
        prevBtn: null,
        nextBtn: null,
        dots: null,
        resize: null
      };
      
      const items = container.children;
      let currentIndex = 0;

      function calculateLayout() {
        if (!viewport) return { itemWidth: 200, itemsPerView: 1, totalSlides: 1, gap: 24 };
        
        const viewportWidth = viewport.offsetWidth;
        const gap =
          window.innerWidth < 640 ? 24 : window.innerWidth < 1024 ? 32 : 40;
        const minItemWidth = 200;
        const maxItemWidth = 230;

        let itemsPerView = Math.floor(viewportWidth / (minItemWidth + gap));
        itemsPerView = Math.max(1, Math.min(itemsPerView, items.length));

        let itemWidth = (viewportWidth - gap * (itemsPerView - 1)) / itemsPerView;

        if (itemWidth > maxItemWidth) {
          itemsPerView = Math.floor(viewportWidth / (maxItemWidth + gap));
          itemsPerView = Math.max(1, Math.min(itemsPerView, items.length));
          itemWidth = (viewportWidth - gap * (itemsPerView - 1)) / itemsPerView;
        }

        // Apply the calculated width to all items
        Array.from(items).forEach((item) => {
          (item as HTMLElement).style.width = `${itemWidth}px`;
        });

        // Update container width to accommodate all items
        const totalWidth = itemWidth * items.length + gap * (items.length - 1);
        (container as HTMLElement).style.width = `${totalWidth}px`;

        // Calculate total slides, ensuring we only show complete slides
        const totalSlides = Math.ceil((items.length - itemsPerView + 1) / itemsPerView);

        return { itemWidth, itemsPerView, totalSlides, gap };
      }

      function updateDots(totalSlides: number) {
        if (dotsContainer) {
          dotsContainer.innerHTML = "";
          for (let i = 0; i < totalSlides; i++) {
            const dot = document.createElement("span");
            dot.className = `w-2 h-2 rounded-full ${i === currentIndex ? "bg-[#B7BEE7]" : "bg-[#B7BEE7]/40"}`;
            dot.setAttribute("data-index", i.toString());
            dotsContainer.appendChild(dot);
          }
        }
      }

      function updateCarousel() {
        const { itemWidth, itemsPerView, totalSlides, gap } = calculateLayout();
        const offset =
          -currentIndex * (itemWidth + gap) * itemsPerView;
        (container as HTMLElement).style.transform = `translateX(${offset}px)`;

        // Update button states
        (prevBtn as HTMLElement).classList.toggle("opacity-50", currentIndex === 0);
        (nextBtn as HTMLElement).classList.toggle("opacity-50", currentIndex >= totalSlides - 1);

        updateDots(totalSlides);
      }

      function cleanup() {
        if (eventHandlers.prevBtn) (prevBtn as HTMLElement).removeEventListener("click", eventHandlers.prevBtn);
        if (eventHandlers.nextBtn) (nextBtn as HTMLElement).removeEventListener("click", eventHandlers.nextBtn);
        if (eventHandlers.dots) (dotsContainer as HTMLElement).removeEventListener("click", eventHandlers.dots);
        if (eventHandlers.resize) window.removeEventListener("resize", eventHandlers.resize);
      }

      document.addEventListener('astro:before-preparation', cleanup, { once: true });
      
      // Set up new event handlers
      eventHandlers.prevBtn = () => {
        if (currentIndex > 0) {
          currentIndex--;
          updateCarousel();
        }
      };
      
      eventHandlers.nextBtn = () => {
        const { totalSlides } = calculateLayout();
        if (currentIndex < totalSlides - 1) {
          currentIndex++;
          updateCarousel();
        }
      };
      
      eventHandlers.dots = (e: Event) => {
        const target = e.target as HTMLElement;
        if (target && target.hasAttribute("data-index")) {
          currentIndex = parseInt(target.getAttribute("data-index") || "0");
          updateCarousel();
        }
      };
      
      let resizeTimeout: number | undefined;
      eventHandlers.resize = () => {
        if (resizeTimeout) clearTimeout(resizeTimeout);
        resizeTimeout = window.setTimeout(() => {
          currentIndex = 0; // Reset to first slide on resize
          updateCarousel();
        }, 250);
      };
      
      // Add event listeners
      (prevBtn as HTMLElement).addEventListener("click", eventHandlers.prevBtn!);
      (nextBtn as HTMLElement).addEventListener("click", eventHandlers.nextBtn!);
      (dotsContainer as HTMLElement).addEventListener("click", eventHandlers.dots!);
      window.addEventListener("resize", eventHandlers.resize!);

      // Initial setup
      updateCarousel();
    }
  });
</script>

<style>
  #carousel-container {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  #carousel-container::-webkit-scrollbar {
    display: none;
  }
</style>
