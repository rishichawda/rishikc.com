<div 
  id="lightbox" 
  class="fixed inset-0 z-50 hidden opacity-0 transition-opacity duration-300 ease-in-out"
  aria-hidden="true"
  role="dialog"
  aria-modal="true"
  aria-label="Image lightbox"
>
  <!-- Backdrop with blur effect -->
  <div class="absolute inset-0 bg-brand-950/80 backdrop-blur-sm"></div>
  
  <!-- Main lightbox container -->
  <div class="relative h-full flex flex-col items-center justify-center p-4">
    <!-- Loading indicator -->
    <div id="lightbox-loader" class="absolute z-10 hidden">
      <div class="h-12 w-12 rounded-full border-4 border-brand-300 border-t-brand-700 animate-spin"></div>
    </div>
    
    <!-- Image container with transition -->
    <div class="relative max-h-[85vh] max-w-[90vw] transform transition-transform duration-300 ease-out scale-95 opacity-0" id="image-container">
      <img
        id="lightbox-image"
        src=""
        alt=""
        class="max-h-[85vh] max-w-[90vw] object-contain rounded-lg shadow-2xl"
        onload="this.parentElement.classList.remove('scale-95', 'opacity-0'); this.parentElement.classList.add('scale-100', 'opacity-100'); document.getElementById('lightbox-loader').classList.add('hidden');"
      />
    </div>
    
    <!-- Caption area -->
    <div id="lightbox-caption" class="mt-4 max-w-[90vw] text-white text-center font-['Montserrat_Variable'] opacity-80 hidden">
      <p id="caption-text" class="text-sm md:text-base"></p>
    </div>
    
    <!-- Counter -->
    <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 bg-brand-900/60 backdrop-blur-sm px-4 py-1.5 rounded-full text-white font-['Montserrat_Variable'] text-sm tracking-wide">
      <span id="image-current">1</span> / <span id="image-total">1</span>
    </div>
    
    <!-- Close button -->
    <button
      id="close-lightbox"
      class="absolute top-4 right-4 text-white p-2 bg-brand-900/40 hover:bg-brand-900/60 rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-brand-300"
      aria-label="Close lightbox"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    
    <!-- Navigation buttons -->
    <div class="absolute inset-x-0 top-1/2 -translate-y-1/2 flex justify-between px-4 sm:px-6">
      <button
        id="prev-image"
        class="group text-white p-2 bg-brand-900/40 hover:bg-brand-900/60 rounded-full transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-brand-300"
        aria-label="Previous image"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6 transition-transform group-hover:-translate-x-0.5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <button
        id="next-image"
        class="group text-white p-2 bg-brand-900/40 hover:bg-brand-900/60 rounded-full transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-brand-300"
        aria-label="Next image"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6 transition-transform group-hover:translate-x-0.5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script is:inline data-astro-rerun>
  document.addEventListener("astro:page-load", function () {
    const lightbox = document.getElementById("lightbox");
    const lightboxImage = document.getElementById("lightbox-image");
    const imageContainer = document.getElementById("image-container");
    const lightboxLoader = document.getElementById("lightbox-loader");
    const closeButton = document.getElementById("close-lightbox");
    const prevButton = document.getElementById("prev-image");
    const nextButton = document.getElementById("next-image");
    const currentCounter = document.getElementById("image-current");
    const totalCounter = document.getElementById("image-total");
    const captionContainer = document.getElementById("lightbox-caption");
    const captionText = document.getElementById("caption-text");

    let currentImageIndex = 0;
    let images = [];
    let captions = [];

    function openLightbox(imageElement) {
      if (!lightbox || !lightboxImage) return;

      // Get all images in the current project
      const projectImages = Array.from(
        document.querySelectorAll(".gallery-image img")
      );
      
      images = projectImages.map(img => img.src);
      captions = projectImages.map(img => img.alt || img.getAttribute('data-caption') || '');
      currentImageIndex = projectImages.findIndex(img => img === imageElement);
      
      // Show loader before image loads
      if (lightboxLoader) {
        lightboxLoader.classList.remove("hidden");
      }
      
      // Set initial image
      lightboxImage.src = imageElement.src;
      lightboxImage.alt = imageElement.alt || '';
      
      // Reset image container animation state
      imageContainer.classList.add('scale-95', 'opacity-0');
      imageContainer.classList.remove('scale-100', 'opacity-100');
      
      // Update image counter
      updateImageCounter();
      
      // Show caption if available
      updateCaption();
      
      // Show the lightbox with fade-in
      lightbox.classList.remove("hidden");
      setTimeout(() => {
        lightbox.classList.add("opacity-100");
        // Set focus to the lightbox for keyboard navigation
        lightbox.focus();
      }, 10);
      
      // Prevent body scrolling
      document.body.style.overflow = "hidden";
    }

    function closeLightbox() {
      if (!lightbox) return;
      
      // Fade out lightbox
      lightbox.classList.remove("opacity-100");
      
      setTimeout(() => {
        lightbox.classList.add("hidden");
        // Reset image for memory management
        lightboxImage.src = "";
        // Restore body scrolling
        document.body.style.overflow = "";
      }, 300); // Match the duration in the CSS transition
    }

    function updateImageCounter() {
      if (currentCounter && totalCounter) {
        currentCounter.textContent = (currentImageIndex + 1).toString();
        totalCounter.textContent = images.length.toString();
      }
    }
    
    function updateCaption() {
      if (captionContainer && captionText) {
        const caption = captions[currentImageIndex];
        if (caption && caption.trim() !== '') {
          captionText.textContent = caption;
          captionContainer.classList.remove('hidden');
        } else {
          captionContainer.classList.add('hidden');
        }
      }
    }

    function showImage(index) {
      if (!lightboxImage || images.length === 0) return;
      
      // Show loading indicator
      if (lightboxLoader) {
        lightboxLoader.classList.remove("hidden");
      }
      
      // Reset image container animation state
      imageContainer.classList.add('scale-95', 'opacity-0');
      imageContainer.classList.remove('scale-100', 'opacity-100');
      
      // Update index with wrapping
      currentImageIndex = (index + images.length) % images.length;
      
      // Update image
      lightboxImage.src = images[currentImageIndex];
      
      // Update counter
      updateImageCounter();
      
      // Update caption
      updateCaption();
    }

    function showPrevImage() {
      showImage(currentImageIndex - 1);
    }

    function showNextImage() {
      showImage(currentImageIndex + 1);
    }

    // Event listeners
    closeButton?.addEventListener("click", closeLightbox);
    prevButton?.addEventListener("click", showPrevImage);
    nextButton?.addEventListener("click", showNextImage);

    // Close on escape key
    document.addEventListener("keydown", (e) => {
      if (!lightbox || lightbox.classList.contains('hidden')) return;
      
      if (e.key === "Escape") closeLightbox();
      if (e.key === "ArrowLeft") showPrevImage();
      if (e.key === "ArrowRight") showNextImage();
    });

    // Close on click outside image
    lightbox?.addEventListener("click", (e) => {
      if (e.target === lightbox) closeLightbox();
    });

    // Prevent closing when clicking on the image container
    imageContainer?.addEventListener("click", (e) => {
      e.stopPropagation();
    });

    // Expose the openLightbox function globally
    window.openLightbox = openLightbox;
  });
</script>

<style>
  /* Additional styles for transitions that are easier with regular CSS */
  #lightbox {
    transition: opacity 300ms ease-in-out;
  }
  
  #lightbox.opacity-100 {
    opacity: 1;
  }
  
  #image-container {
    transition: transform 300ms ease-out, opacity 300ms ease-out;
  }
  
  #image-container.scale-100 {
    transform: scale(1);
    opacity: 1;
  }
</style>
