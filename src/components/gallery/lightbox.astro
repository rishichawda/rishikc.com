<div id="lightbox" class="fixed inset-0 z-50 hidden">
  <div class="absolute inset-0 bg-black/90"></div>
  <div class="relative h-full flex items-center justify-center">
    <img
      id="lightbox-image"
      src=""
      alt=""
      class="max-h-[90vh] max-w-[90vw] object-contain"
    />
    <button
      id="close-lightbox"
      class="absolute top-4 right-4 text-white p-2 hover:bg-white/10 rounded-full transition-colors"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"
        />
      </svg>
    </button>
    <button
      id="prev-image"
      class="absolute left-4 top-1/2 -translate-y-1/2 text-white p-2 hover:bg-white/10 rounded-full transition-colors"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M15 19l-7-7 7-7"
        />
      </svg>
    </button>
    <button
      id="next-image"
      class="absolute right-4 top-1/2 -translate-y-1/2 text-white p-2 hover:bg-white/10 rounded-full transition-colors"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"
        />
      </svg>
    </button>
  </div>
</div>

<script is:inline data-astro-rerun>
  const lightbox = document.getElementById('lightbox');
  const lightboxImage = document.getElementById('lightbox-image');
  const closeButton = document.getElementById('close-lightbox');
  const prevButton = document.getElementById('prev-image');
  const nextButton = document.getElementById('next-image');

  let currentImageIndex = 0;
  let images = [];

  function openLightbox(imageElement) {
    if (!lightbox || !lightboxImage) return;

    // Get all images in the current project
    const projectImages = Array.from(document.querySelectorAll('.group img')).map(
      (img) => img.src
    );
    images = projectImages;
    currentImageIndex = projectImages.indexOf(imageElement.src);

    lightboxImage.src = imageElement.src;
    lightboxImage.alt = imageElement.alt;
    lightbox.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  function closeLightbox() {
    if (!lightbox) return;
    lightbox.classList.add('hidden');
    document.body.style.overflow = '';
  }

  function showImage(index) {
    if (!lightboxImage || images.length === 0) return;
    currentImageIndex = (index + images.length) % images.length;
    lightboxImage.src = images[currentImageIndex];
  }

  function showPrevImage() {
    showImage(currentImageIndex - 1);
  }

  function showNextImage() {
    showImage(currentImageIndex + 1);
  }

  // Event listeners
  closeButton?.addEventListener('click', closeLightbox);
  prevButton?.addEventListener('click', showPrevImage);
  nextButton?.addEventListener('click', showNextImage);

  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') closeLightbox();
    if (e.key === 'ArrowLeft') showPrevImage();
    if (e.key === 'ArrowRight') showNextImage();
  });

  // Close on click outside image
  lightbox?.addEventListener('click', (e) => {
    if (e.target === lightbox) closeLightbox();
  });

  // Expose the openLightbox function globally
  window.openLightbox = openLightbox;
</script>