---
import type { MarkdownHeading } from "astro";

type Props = {
    headings: MarkdownHeading[];
};

const { headings } = Astro.props;
let filteredHeadings = headings.filter((heading) => heading.depth <= (headings.length > 10 ? 3 : 4));
---

<div class="lg:sticky top-6 py-6 max-w-xs max-h-[calc(100vh-3rem)] overflow-y-auto" id="table-of-contents">
    <nav class="relative bg-white/90 backdrop-blur-xl rounded-2xl border border-brand-200/30 shadow-lg shadow-brand-500/5 overflow-hidden">
        <!-- Progress indicator -->
        <div class="absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-brand-100 to-brand-50">
            <div 
                id="reading-progress" 
                class="w-full bg-gradient-to-b from-brand-600 to-brand-500 transition-all duration-300 ease-out"
                style="height: 0%"
            ></div>
        </div>
        
        <div class="p-6">
            <!-- Header with icon -->
            <div class="flex items-center gap-3 mb-6">
                <div class="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-brand-500/10 to-brand-600/10 rounded-lg flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-brand-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                    </svg>
                </div>
                <h2 class="text-lg font-semibold text-gray-900 font-['Red_Hat_Display_Variable']">
                    Table of Contents
                </h2>
            </div>
            
            <!-- Navigation list -->
            <ul class="space-y-1">
                {
                    filteredHeadings.map((item, index) => (
                        <li
                            class="list-none relative"
                            style={`margin-left: ${(item.depth - 2) * 1}rem;`}
                            data-heading-level={item.depth}
                        >
                            <!-- Connector line for nested items -->
                            {item.depth > 2 && (
                                <div class="absolute -left-4 top-3 w-3 h-px bg-brand-200/60"></div>
                            )}
                            
                            <a
                                class="toc-link group flex items-start gap-2 rounded-xl px-3 py-2.5 transition-all duration-300 text-gray-600 hover:bg-brand-50/70 hover:text-brand-700 relative"
                                href={`#${item.slug}`}
                                data-target={item.slug}
                            >
                                <!-- Active indicator -->
                                <div class="absolute left-0 top-1/2 -translate-y-1/2 w-0.5 h-0 bg-gradient-to-b from-brand-600 to-brand-500 rounded-full transition-all duration-300 group-hover:h-4 toc-active-indicator"></div>
                                
                                <!-- Bullet point -->
                                <div class="flex-shrink-0 w-1.5 h-1.5 rounded-full bg-brand-300/60 mt-2 group-hover:bg-brand-500 transition-all duration-300 group-hover:scale-125"></div>
                                
                                <!-- Text content -->
                                <span 
                                    class={`flex-1 leading-relaxed font-['Montserrat_Variable'] transition-all duration-300 ${
                                        item.depth > 3 ? "text-sm" : "text-sm"
                                    } ${
                                        item.depth === 2 ? "font-medium" : "font-normal"
                                    }`}
                                    title={item.text}
                                >
                                    {item.text}
                                </span>
                            </a>
                        </li>
                    ))
                }
            </ul>
            
            <!-- Back to top button -->
            <div class="mt-6 pt-4 border-t border-brand-100/50">
                <button
                    id="back-to-top"
                    class="group w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-gradient-to-r from-brand-50 to-brand-100/50 hover:from-brand-100 hover:to-brand-200/50 text-brand-700 hover:text-brand-800 rounded-xl transition-all duration-300 font-['Montserrat_Variable'] text-sm font-medium hover:shadow-md"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 group-hover:-translate-y-0.5 transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" />
                    </svg>
                    Back to top
                </button>
            </div>
        </div>
    </nav>
</div>

<script>
    document.addEventListener('astro:page-load', () => {
        // Initialize Table of Contents functionality
        const tocContainer = document.getElementById('table-of-contents');
        if (!tocContainer) return;
        
        const tocLinks = tocContainer.querySelectorAll('.toc-link') as NodeListOf<HTMLAnchorElement>;
        const progressBar = document.getElementById('reading-progress') as HTMLElement;
        const backToTopBtn = document.getElementById('back-to-top') as HTMLButtonElement;
        
        // Get all headings in the content
        const headings = Array.from(document.querySelectorAll('h2, h3, h4, h5, h6')).filter(heading => heading.id) as HTMLElement[];
        
        let isScrolling = false;
        let lastActiveLink: HTMLElement | null = null;
        let scrollTimeout: number | null = null;
        
        // Smooth scroll function
        function smoothScrollTo(element: HTMLElement) {
            if (!element) return;
            
            const offset = 100; // Account for sticky header and some breathing room
            const elementPosition = element.offsetTop - offset;
            const startPosition = window.pageYOffset;
            const distance = elementPosition - startPosition;
            
            if (Math.abs(distance) < 10) {
                // Already close enough, no need to scroll
                isScrolling = false;
                return;
            }
            
            window.scrollTo({
                top: elementPosition,
                behavior: 'smooth'
            });
        }
        
        // Update active link
        function updateActiveLink(activeHeading: HTMLElement | null) {
            // Always clear previous active states first
            tocLinks.forEach(link => {
                const indicator = link.querySelector('.toc-active-indicator') as HTMLElement;
                link.classList.remove('active', 'bg-brand-50', 'text-brand-700', 'font-medium');
                link.classList.add('text-gray-600');
                if (indicator) {
                    indicator.style.height = '0px';
                }
            });
            
            // Add active state to current link (only if we have an active heading)
            if (activeHeading && tocContainer) {
                const activeLink = tocContainer.querySelector(`[data-target="${activeHeading.id}"]`) as HTMLElement;
                if (activeLink) {
                    const indicator = activeLink.querySelector('.toc-active-indicator') as HTMLElement;
                    activeLink.classList.add('active', 'bg-brand-50', 'text-brand-700', 'font-medium');
                    activeLink.classList.remove('text-gray-600');
                    if (indicator) {
                        indicator.style.height = '16px';
                    }
                    lastActiveLink = activeLink;
                }
            } else {
                // No active heading, so clear lastActiveLink
                lastActiveLink = null;
            }
        }
        
        // Update reading progress
        function updateReadingProgress() {
            if (!progressBar) return;
            
            const docHeight = document.documentElement.scrollHeight - window.innerHeight;
            const scrolled = window.pageYOffset;
            const progress = Math.min((scrolled / docHeight) * 100, 100);
            
            progressBar.style.height = `${progress}%`;
        }
        
        // Find current active heading
        function findActiveHeading(): HTMLElement | null {
            const scrollPosition = window.pageYOffset;
            const viewportHeight = window.innerHeight;
            const headerOffset = 100; // Account for sticky header
            
            let activeHeading: HTMLElement | null = null;
            
            // Special case: if we're at the very top, don't highlight anything
            if (scrollPosition < 50) {
                return null;
            }
            
            // Special case: if we're near the bottom, highlight the last heading
            if (scrollPosition + viewportHeight >= document.documentElement.scrollHeight - 100) {
                return headings[headings.length - 1];
            }
            
            // Find the heading whose section we're currently in
            for (let i = 0; i < headings.length; i++) {
                const heading = headings[i];
                const headingTop = heading.offsetTop;
                const nextHeading = headings[i + 1];
                const nextHeadingTop = nextHeading ? nextHeading.offsetTop : document.documentElement.scrollHeight;
                
                // Calculate section boundaries
                const sectionStart = headingTop - headerOffset;
                const sectionEnd = nextHeadingTop - headerOffset;
                
                // Check if current scroll position is within this section
                if (scrollPosition >= sectionStart && scrollPosition < sectionEnd) {
                    activeHeading = heading;
                    break;
                }
            }
            
            // Fallback: if no section found, use the last heading that's above the viewport
            if (!activeHeading) {
                for (let i = headings.length - 1; i >= 0; i--) {
                    const heading = headings[i];
                    if (heading.offsetTop <= scrollPosition + headerOffset) {
                        activeHeading = heading;
                        break;
                    }
                }
            }
            
            return activeHeading;
        }
        
        // Scroll event handler
        function handleScroll() {
            updateReadingProgress();
            
            // Clear existing timeout
            if (scrollTimeout) {
                clearTimeout(scrollTimeout);
            }
            
            // Always update active link, but with debouncing for better performance
            scrollTimeout = window.setTimeout(() => {
                // Only update if we're not in the middle of a user-initiated scroll
                if (!isScrolling) {
                    const activeHeading = findActiveHeading();
                    updateActiveLink(activeHeading);
                }
            }, 100); // Reduced delay for more responsive updates
        }
        
        // Click event handlers
        tocLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                isScrolling = true;
                
                const targetId = link.getAttribute('data-target');
                if (!targetId) return;
                
                const targetElement = document.getElementById(targetId) as HTMLElement;
                
                if (targetElement) {
                    // Immediately update active link for better UX
                    updateActiveLink(targetElement);
                    
                    // Perform smooth scroll
                    smoothScrollTo(targetElement);
                    
                    // Reset scrolling flag after a reasonable time
                    setTimeout(() => {
                        isScrolling = false;
                        // Double-check active heading after scroll settles
                        setTimeout(() => {
                            const activeHeading = findActiveHeading();
                            updateActiveLink(activeHeading);
                        }, 200);
                    }, 800); // Reduced timeout for more responsive updates
                }
            });
        });
        
        // Back to top button
        if (backToTopBtn) {
            backToTopBtn.addEventListener('click', () => {
                isScrolling = true;
                
                // Clear active states immediately
                updateActiveLink(null);
                
                // Scroll to top
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
                
                setTimeout(() => {
                    isScrolling = false;
                    // Re-check active heading after scroll completes
                    setTimeout(() => {
                        const activeHeading = findActiveHeading();
                        updateActiveLink(activeHeading);
                    }, 200);
                }, 800);
            });
        }
        
        // Initialize on load
        setTimeout(() => {
            updateReadingProgress();
            const initialActiveHeading = findActiveHeading();
            updateActiveLink(initialActiveHeading);
        }, 100); // Small delay to ensure DOM is ready
        
        // Throttled scroll listener with better performance
        let ticking = false;
        window.addEventListener('scroll', () => {
            if (!ticking) {
                requestAnimationFrame(() => {
                    handleScroll();
                    ticking = false;
                });
                ticking = true;
            }
        }, { passive: true });
        
        // Handle window resize
        window.addEventListener('resize', () => {
            updateReadingProgress();
            if (!isScrolling) {
                const activeHeading = findActiveHeading();
                updateActiveLink(activeHeading);
            }
        });
    });
</script>

<style>
    /* Custom scrollbar for TOC */
    #table-of-contents {
        scrollbar-width: thin;
        scrollbar-color: #cbd5e1 transparent;
    }
    
    #table-of-contents::-webkit-scrollbar {
        width: 4px;
    }
    
    #table-of-contents::-webkit-scrollbar-track {
        background: transparent;
    }
    
    #table-of-contents::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 2px;
    }
    
    #table-of-contents::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
    }
    
    /* Enhanced hover effects */
    .toc-link:hover .toc-active-indicator {
        height: 16px !important;
    }
    
    /* Enhanced active state */
    .toc-link.active {
        background-color: rgba(154, 167, 215, 0.1) !important;
        color: rgb(121, 137, 201) !important;
        font-weight: 500 !important;
    }
    
    .toc-link.active .toc-active-indicator {
        height: 16px !important;
        opacity: 1 !important;
    }
    
    .toc-link.active span {
        color: rgb(121, 137, 201) !important;
    }
    
    /* Fade in animation */
    #table-of-contents {
        animation: fadeInUp 0.6s ease-out;
    }
    
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Smooth transitions for all elements */
    .toc-link * {
        transition: all 0.3s ease;
    }
</style>