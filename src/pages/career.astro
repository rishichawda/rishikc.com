---
import { getCollection } from "astro:content";
import BaseLayout from "../layouts/base_layout.astro";
import { Schema } from "astro-seo-schema";
import favicon from "../../content/assets/logo/Group 489.png";
import { fetchMetadata, type WebsiteMeta } from "../utils/metadataFetcher";
import LinkCard from "../components/LinkCard.astro";
import { calculateDuration, calculateCompanyDuration } from "../utils/dateUtils";
interface Language {
  name: string;
  level: string;
}

interface Social {
  platform: string;
  url: string;
}

interface Position {
  title: string;
  period: string;
  start_date: string;
  end_date: string | null;
  duration: string;
  location?: string;
  description?: string;
  responsibilities?: string[];
  links?: string[];
  linksMeta?: WebsiteMeta[];
}

interface ClubPosition {
  title: string;
  period: string;
  start_date: string;
  end_date: string | null;
  duration: string;
  location?: string;
  description?: string;
  responsibilities?: string[];
}

interface ExtraCurricular {
  club: string;
  positions: ClubPosition[];
}

interface Experience {
  company: string;
  duration: string;
  positions: Position[];
  website?: string[];
  websitesMeta?: WebsiteMeta[];
}

interface Education {
  university: string;
  institution: string;
  degree: string;
  period: string;
  start_date?: string;
  end_date?: string;
  extra_curriculars?: ExtraCurricular[];
}

interface Certification {
  institution: string;
  title: string;
}

interface ProfileData {
  name: string;
  title: string;
  location: string;
  summary: string;
  bio: string | string[];
  contact: {
    linkedin: string;
  };
  skills: string[];
  languages: Language[];
  certifications: Certification[];
  experience: Experience[];
  education: Education[];
  interests: string[];
  socials: Social[];
}

const profileEntry = await getCollection("profile");
const profileData = profileEntry[0].data as ProfileData;
const profile = profileData;

// --- Metadata Fetching Logic ---
const experiencesWithMeta = await Promise.all(
  profile.experience.map(async (exp): Promise<Experience> => {
    let companyWebsitesMeta: WebsiteMeta[] = [];
    if (exp.website && exp.website.length > 0) {
      companyWebsitesMeta = await Promise.all(
        exp.website.map((url) => fetchMetadata(url)),
      );
    }

    const positionsWithMeta = await Promise.all(
      exp.positions.map(async (pos): Promise<Position> => {
        if (pos.links && pos.links.length > 0) {
          const linksMeta = await Promise.all(
            pos.links.map((url) => fetchMetadata(url)),
          );
          return { ...pos, linksMeta };
        }
        return pos;
      }),
    );

    return {
      ...exp,
      websitesMeta: companyWebsitesMeta,
      positions: positionsWithMeta,
    };
  }),
);

const page_info = {
  title: `Career | ${profile.name}`,
  description: `Explore ${profile.name}'s professional journey as a ${profile.title}. Learn about work experience, skills, and career achievements.`,
  keywords: `${profile.name}, Career, Software Engineer, Experience, Skills, ${profile.skills.join(', ')}`,
};

const siteUrl = new URL(
  Astro.url.pathname,
  Astro.site || "https://rishikc.com",
).toString();
---

<BaseLayout page_info={page_info}>
  <Schema
    slot="head"
    item={{
      "@context": "https://schema.org",
      "@type": "Person",
      name: profile.name,
      jobTitle: profile.title,
      worksFor: {
        "@type": "Organization",
        name: profile.experience[0]?.company || "Unknown Company",
      },
      url: siteUrl,
      image: `${siteUrl.replace(/\/$/, "")}/${favicon.src}`,
      description: profile.summary,
      address: {
        "@type": "PostalAddress",
        addressLocality: "Bengaluru",
        addressRegion: "KA",
        addressCountry: "IN",
      },
      alumniOf: profile.education.map((edu) => ({
        "@type": "EducationalOrganization",
        name: edu.university,
      })),
      knowsLanguage: profile.languages.map((lang) => lang.name),
      sameAs: profile.socials.map((social: Social) => social.url),
    }}
  />

  <main
    class="min-h-screen bg-gradient-to-b from-brand-50/30 via-white to-gray-50/50"
  >
    <div class="relative overflow-hidden">
      <div class="absolute inset-0 bg-gradient-to-br from-brand-50 via-white to-brand-100/20 opacity-70"></div>
      <div class="absolute inset-0 bg-pattern opacity-30"></div>
      
      <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-20 lg:py-24">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-6 mb-16">
          <div class="space-y-4">
            <h1
              class="text-4xl sm:text-5xl lg:text-6xl font-light text-gray-900 leading-tight font-['Red_Hat_Display_Variable']"
            >
              Career Journey
            </h1>
            <p class="text-lg sm:text-xl text-gray-700 font-['Montserrat_Variable'] font-light max-w-2xl">
              Exploring the path of innovation, growth, and meaningful impact in technology
            </p>
          </div>
          <a
            href="/"
            class="group inline-flex items-center px-6 py-3 bg-white/90 backdrop-blur-sm border border-brand-200/50 rounded-xl text-brand-700 hover:text-brand-600 hover:bg-white hover:shadow-lg transition-all duration-300 font-['Montserrat_Variable'] text-sm font-medium"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4 mr-2 group-hover:-translate-x-0.5 transition-transform duration-200"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Home
          </a>
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-20">
    <div class="mb-24 scroll-reveal">
      <div class="relative group">
        <div class="absolute inset-0 bg-gradient-to-r from-brand-100/30 via-brand-50/20 to-brand-200/30 rounded-2xl transform rotate-1 group-hover:rotate-2 transition-transform duration-500"></div>
        <div class="relative bg-white/95 backdrop-blur-sm rounded-2xl p-8 sm:p-10 lg:p-12 shadow-lg border border-brand-100/30 hover:shadow-xl hover:shadow-brand-100/20 transition-all duration-300">
          <div class="flex flex-col lg:flex-row gap-12">
            <div class="lg:w-2/3 space-y-6">
              <div class="space-y-3">
                <h2 class="text-3xl sm:text-4xl font-light text-gray-900 font-['Red_Hat_Display_Variable']">
                  {profile.name}
                </h2>
                <div class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-brand-600 to-brand-300 rounded-full">
                  <p class="text-white font-['Montserrat_Variable'] text-sm font-medium">
                    {profile.title}
                  </p>
                </div>
              </div>
              
              <div class="prose prose-lg max-w-none">
                {Array.isArray(profile.bio) ? (
                  <div class="space-y-5">
                    {profile.bio.map((paragraph, index) => (
                      <p class={`text-gray-700 font-['Montserrat_Variable'] leading-relaxed font-light ${
                        index === 0 ? 'text-xl font-medium text-gray-800' : ''
                      }`}>
                        {paragraph}
                      </p>
                    ))}
                  </div>
                ) : (
                  <p class="text-gray-700 font-['Montserrat_Variable'] leading-relaxed text-xl font-light">
                    {profile.bio}
                  </p>
                )}
              </div>

              <div class="flex flex-col sm:flex-row gap-6 pt-4">
                <div class="flex items-center text-gray-600 group">
                  <div class="p-2 bg-gray-50 rounded-xl mr-3 group-hover:bg-gray-100 transition-colors">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5 text-brand-600 group-hover:text-brand-700 transition-colors"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                      ></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                  </div>
                  <span class="font-['Montserrat_Variable'] font-medium text-gray-700">{profile.location}</span>
                </div>

                <a
                  href={profile.contact.linkedin}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="inline-flex items-center text-gray-600 hover:text-brand-700 group transition-colors"
                >
                  <div class="p-2 bg-gray-50 rounded-xl mr-3 group-hover:bg-gray-100 transition-colors">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5 text-brand-600 group-hover:text-brand-700 transition-colors"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"
                      ></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M2 9h4v12H2z"></path>
                      <circle
                        cx="4"
                        cy="4"
                        r="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"></circle>
                    </svg>
                  </div>
                  <span class="font-['Montserrat_Variable'] font-medium text-gray-700">LinkedIn Profile</span>
                </a>
              </div>

              <div class="flex flex-wrap gap-3 pt-4">
                {profile.socials.map((social) => (
                  <a
                    href={social.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="group inline-flex items-center px-4 py-2 bg-gray-50 hover:bg-gradient-to-r hover:from-brand-400 hover:to-brand-700 rounded-xl text-gray-700 hover:text-white transition-all duration-300 shadow-sm hover:shadow-md hover:-translate-y-0.5"
                  >
                    <span class="font-['Montserrat_Variable'] text-sm font-medium">
                      {social.platform}
                    </span>
                  </a>
                ))}
              </div>
            </div>

            <div class="lg:w-1/3">
              <div class="sticky top-8 space-y-8">
                <div class="bg-gradient-to-br from-brand-50/50 to-white rounded-2xl p-6 border border-brand-100/50 hover:shadow-lg hover:shadow-brand-100/20 transition-shadow duration-300">
                  <h3 class="text-xl font-medium text-gray-900 font-['Red_Hat_Display_Variable'] mb-5 flex items-center">
                    <div class="w-2 h-8 bg-gradient-to-b from-brand-600 to-brand-700 rounded-full mr-3"></div>
                    Core Skills
                  </h3>
                  <div class="flex flex-wrap gap-2">
                    {profile.skills.map((skill, index) => (
                      <span class="inline-block px-3 py-2 rounded-xl text-xs font-medium font-['Montserrat_Variable'] border-1 border-brand-200/50 text-brand-600">
                        {skill}
                      </span>
                    ))}
                  </div>
                </div>

                {profile.certifications && profile.certifications.length > 0 && (
                  <div class="bg-gradient-to-br from-brand-50/50 to-white rounded-2xl p-6 border border-brand-100/50 hover:shadow-lg hover:shadow-brand-100/20 transition-shadow duration-300">
                    <h3 class="text-xl font-medium text-gray-900 font-['Red_Hat_Display_Variable'] mb-5 flex items-center">
                      <div class="w-2 h-8 bg-gradient-to-b from-brand-500 to-brand-600 rounded-full mr-3"></div>
                      Certifications
                    </h3>
                    <div class="space-y-4">
                      {profile.certifications.map((certification) => (
                        <div class="group p-3 rounded-xl hover:bg-brand-50 transition-all duration-200">
                          <p class="text-sm font-semibold font-['Montserrat_Variable'] text-brand-700">
                            {certification.title}
                          </p>
                          <p class="text-xs text-gray-600 font-['Montserrat_Variable'] mt-1">
                            {certification.institution}
                          </p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                {profile.interests && profile.interests.length > 0 && (
                  <div class="bg-gradient-to-br from-brand-50/50 to-white rounded-2xl p-6 border border-brand-100/50 hover:shadow-lg hover:shadow-brand-100/20 transition-shadow duration-300">
                    <h3 class="text-xl font-medium text-gray-900 font-['Red_Hat_Display_Variable'] mb-5 flex items-center">
                      <div class="w-2 h-8 bg-gradient-to-b from-brand-400 to-brand-500 rounded-full mr-3"></div>
                      Interests & Hobbies
                    </h3>
                    <div class="flex flex-wrap gap-2">
                      {profile.interests.map((interest, index) => (
                        <span class="inline-block px-3 py-2 rounded-xl text-xs font-medium font-['Montserrat_Variable']  border-1 border-brand-200/50 text-brand-600">
                          {interest}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="mb-20 md:mb-32 scroll-reveal">
      <div class="text-center mb-16">
        <div class="inline-flex items-center justify-center w-16 h-1 bg-gradient-to-r from-brand-400 via-brand-500 to-brand-600 rounded-full mb-6"></div>
        <h2 class="text-3xl sm:text-4xl lg:text-5xl font-['Red_Hat_Display_Variable'] font-light text-gray-900 mb-4 tracking-tight">
          Work Experience
        </h2>
        <p class="text-lg text-gray-600 font-['Montserrat_Variable'] font-light max-w-2xl mx-auto">
          A journey through innovation, growth, and meaningful contributions
        </p>
      </div>

      <div class="relative max-w-6xl mx-auto">
        <div class="absolute left-6 md:left-1/2 top-0 bottom-0 w-px bg-gradient-to-b from-brand-200 via-brand-300 to-brand-200 transform md:-translate-x-0.5">
          <div class="absolute inset-0 bg-gradient-to-b from-brand-400/20 via-brand-500/30 to-brand-400/20 blur-sm"></div>
        </div>

        <div class="space-y-16 md:space-y-20">
          {experiencesWithMeta.map((exp, index) => (
            <div
              class={`relative timeline-item group ${index % 2 === 0 ? "md:flex-row" : "md:flex-row-reverse"} flex flex-col md:flex md:items-center`}
            >
              <div class="absolute left-6 md:left-1/2 top-12 md:top-8 z-20 transform -translate-x-1/2">
                <div class="relative timeline-dot-container">
                  <div class="absolute inset-0 w-8 h-8 bg-brand-400/20 rounded-full timeline-pulse-ring"></div>
                  <div class="absolute inset-0 w-10 h-10 -top-1 -left-1 bg-gradient-to-br from-brand-400/30 to-brand-600/30 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-700 ease-out blur-sm group-hover:scale-110"></div>
                  <div class="relative w-8 h-8 bg-gradient-to-br from-brand-500 to-brand-600 rounded-full shadow-lg timeline-main-dot flex items-center justify-center">
                    <div class="w-3 h-3 bg-white rounded-full shadow-inner timeline-inner-dot"></div>
                  </div>
                  <div class="absolute inset-0 w-8 h-8 border-2 border-white/50 rounded-full timeline-outer-ring"></div>
                </div>
              </div>

              <div class={`mb-8 ml-16 md:ml-0 md:mb-0 md:w-1/2 ${index % 2 === 0 ? "md:pr-16 md:text-right" : "md:pl-16 md:text-left"}`}>
                <div class="space-y-4">
                  <div class={`inline-flex items-center px-4 py-2 bg-gradient-to-r from-brand-50 to-brand-100/50 rounded-full border border-brand-200/50 ${index % 2 === 0 ? "md:ml-auto" : ""}`}>
                    <div class="w-2 h-2 bg-brand-500 rounded-full mr-2 timeline-company-dot"></div>
                    <span class="text-sm font-medium text-brand-700 font-['Montserrat_Variable']">Company</span>
                  </div>

                  <h3 class="text-2xl md:text-3xl font-medium text-gray-900 font-['Red_Hat_Display_Variable'] tracking-tight">
                    {exp.company}
                  </h3>

                  <p class="text-base text-gray-600 font-['Montserrat_Variable'] font-light">
                    {(() => {
                      const dynamicDuration = calculateCompanyDuration(exp.positions);
                      return dynamicDuration || exp.duration;
                    })()}
                  </p>

                  {exp.websitesMeta && exp.websitesMeta.length > 0 && (
                    <div class={`flex flex-col gap-4 mt-6 ${index % 2 === 0 ? "md:items-end" : "md:items-start"}`}>
                      {exp.websitesMeta.map((site) => (
                        <LinkCard
                          {...site}
                          altText={`${site.title || exp.company} preview`}
                          errorTitle={`Visit ${exp.company} website`}
                        />
                      ))}
                    </div>
                  )}
                </div>
              </div>

              <div class={`ml-16 md:ml-0 md:w-1/2 ${index % 2 === 0 ? "md:pl-16" : "md:pr-16"}`}>
                <div class="bg-white/70 backdrop-blur-sm rounded-3xl p-8 shadow-lg border border-white/50 hover:shadow-2xl hover:shadow-brand-200/40 transition-shadow duration-300 group-hover:bg-white/90">
                  <div class="absolute inset-0 bg-gradient-to-br from-white/40 via-white/30 to-brand-50/20 rounded-3xl backdrop-blur-sm"></div>
                  
                  <div class="relative z-10 space-y-8">
                    {exp.positions.map((position, posIndex) => (
                      <div class={`${posIndex > 0 ? 'pt-8 border-t border-gray-100' : ''}`}>
                        <div class="mb-6">
                          <h4 class="text-xl font-semibold text-gray-900 font-['Red_Hat_Display_Variable'] mb-2 tracking-tight">
                            {position.title}
                          </h4>
                          
                          <div class="flex flex-wrap gap-4 text-sm text-gray-600 font-['Montserrat_Variable']">
                            <span class="inline-flex items-center">
                              <svg class="w-4 h-4 mr-1.5 text-brand-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                              </svg>
                              {position.period}
                              {(() => {
                                const dynamicDuration = calculateDuration(position.start_date, position.end_date);
                                return dynamicDuration ? ` (${dynamicDuration})` : (position.duration ? ` (${position.duration})` : "");
                              })()}
                            </span>
                            
                            {position.location && (
                              <span class="inline-flex items-center">
                                <svg class="w-4 h-4 mr-1.5 text-brand-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                                {position.location}
                              </span>
                            )}
                          </div>
                        </div>

                        {position.description && (
                          <div class="mb-6">
                            <p class="text-gray-700 font-['Montserrat_Variable'] font-light leading-relaxed text-base">
                              {position.description}
                            </p>
                          </div>
                        )}

                        {position.responsibilities && position.responsibilities.length > 0 && (
                          <div class="mb-6">
                            <h5 class="text-sm font-semibold text-gray-800 font-['Red_Hat_Display_Variable'] mb-3 uppercase tracking-wide">
                              Key Responsibilities
                            </h5>
                            <ul class="space-y-2">
                              {position.responsibilities.map((item) => (
                                <li class="flex items-start">
                                  <div class="w-1.5 h-1.5 rounded-full bg-brand-500 mt-2.5 mr-3 flex-shrink-0"></div>
                                  <span class="text-sm text-gray-700 font-['Montserrat_Variable'] font-light leading-relaxed">
                                    {item}
                                  </span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}

                        {position.linksMeta && position.linksMeta.length > 0 && (
                          <div class="mt-6 p-4 bg-gradient-to-br from-brand-50/5 to-brand-100/30 rounded-2xl border border-brand-100/50">
                            <h5 class="text-sm font-semibold text-gray-800 font-['Red_Hat_Display_Variable'] mb-3 uppercase tracking-wide">
                              Related Projects
                            </h5>
                            <div class="space-y-3">
                              {position.linksMeta.map((site) => (
                                <LinkCard {...site} />
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
    <div class="mb-20 md:mb-32 scroll-reveal">
      <div class="text-center mb-16">
        <div class="inline-flex items-center justify-center w-16 h-1 bg-gradient-to-r from-brand-400 via-brand-500 to-brand-600 rounded-full mb-6"></div>
        <h2 class="text-3xl sm:text-4xl lg:text-5xl font-['Red_Hat_Display_Variable'] font-light text-gray-900 mb-4 tracking-tight">
          Education
        </h2>
        <p class="text-lg text-gray-600 font-['Montserrat_Variable'] font-light max-w-2xl mx-auto">
          Highlights from my academic journey
        </p>
      </div>

      <div class="max-w-4xl mx-auto space-y-8">
        {profile.education.map((edu, index) => (
          <div class="group relative">
            <div class="absolute inset-0 bg-gradient-to-br from-brand-50/30 via-white to-brand-100/20 rounded-3xl transform rotate-1 group-hover:rotate-2 transition-transform duration-500 opacity-50"></div>
            
            <div class="relative bg-white/80 backdrop-blur-sm rounded-3xl p-8 md:p-10 shadow-lg border border-white/50 hover:shadow-2xl hover:shadow-brand-200/40 transition-shadow duration-300 group-hover:bg-white/95">
              <div class="absolute inset-0 bg-gradient-to-br from-white/60 via-white/40 to-brand-50/30 rounded-3xl"></div>
              
              <div class="relative z-10">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
                  <div>
                    {/* <div class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-brand-50 to-brand-100/50 rounded-full border border-brand-200/50 mb-3">
                      <div class="w-2 h-2 bg-brand-500 rounded-full mr-2"></div>
                      <span class="text-sm font-medium text-brand-700 font-['Montserrat_Variable']">Education</span>
                    </div> */}
                    
                    <h3 class="text-2xl md:text-3xl font-semibold text-gray-900 font-['Red_Hat_Display_Variable'] mb-2 tracking-tight">
                      {edu.university}
                    </h3>
                    
                    <p class="text-base text-gray-600 font-['Montserrat_Variable'] font-medium mb-3">
                      {edu.institution}
                    </p>
                    
                    <p class="text-lg text-gray-700 font-['Montserrat_Variable'] font-medium mb-2">
                      {edu.degree}
                    </p>
                  </div>
                  
                  <div class="flex items-center text-gray-600">
                    <svg class="w-5 h-5 mr-2 text-brand-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    <span class="font-['Montserrat_Variable'] font-medium">
                      {edu.period}
                    </span>
                  </div>
                </div>

                {edu.extra_curriculars && edu.extra_curriculars.length > 0 && (
                  <div class="mt-8 p-6 bg-gradient-to-br from-brand-50/50 to-brand-100/30 rounded-2xl border border-brand-100/50">
                    <h4 class="text-lg font-semibold text-gray-900 font-['Red_Hat_Display_Variable'] mb-6 flex items-center">
                      <div class="w-2 h-6 bg-gradient-to-b from-brand-500 to-brand-600 rounded-full mr-3"></div>
                      Extra-Curricular Activities
                    </h4>
                    
                    <div class="space-y-6">
                      {edu.extra_curriculars.map((activity) => (
                        <div class="bg-white/60 backdrop-blur-sm rounded-2xl p-6 border border-white/50">
                          <h5 class="text-xl font-medium text-gray-800 font-['Red_Hat_Display_Variable'] mb-4">
                            {activity.club}
                          </h5>
                          
                          <div class="space-y-4">
                            {activity.positions.map((position) => (
                              <div class="pl-4 border-l-2 border-brand-300/50 relative">
                                <div class="absolute left-[-5px] top-2 w-2 h-2 bg-brand-500 rounded-full"></div>
                                
                                <div class="space-y-2">
                                  <h6 class="text-base font-medium text-gray-800 font-['Montserrat_Variable']">
                                    {position.title}
                                  </h6>
                                  
                                  <div class="flex flex-wrap gap-4 text-sm text-gray-600 font-['Montserrat_Variable']">
                                    <span class="inline-flex items-center">
                                      <svg class="w-4 h-4 mr-1.5 text-brand-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                      </svg>
                                      {position.period}
                                      {(() => {
                                        const dynamicDuration = calculateDuration(position.start_date, position.end_date);
                                        return dynamicDuration ? ` (${dynamicDuration})` : (position.duration ? ` (${position.duration})` : "");
                                      })()}
                                    </span>
                                    
                                    {position.location && (
                                      <span class="inline-flex items-center">
                                        <svg class="w-4 h-4 mr-1.5 text-brand-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                        </svg>
                                        {position.location}
                                      </span>
                                    )}
                                  </div>
                                  
                                  {position.description && (
                                    <p class="text-sm text-gray-700 font-['Montserrat_Variable'] font-light leading-relaxed italic">
                                      {position.description}
                                    </p>
                                  )}
                                  
                                  {position.responsibilities && position.responsibilities.length > 0 && (
                                    <div class="mt-3 p-3 bg-white/80 rounded-xl border border-brand-100/30">
                                      <h6 class="text-xs font-semibold text-gray-800 font-['Red_Hat_Display_Variable'] mb-2 uppercase tracking-wide">
                                        Key Responsibilities
                                      </h6>
                                      <ul class="space-y-1.5">
                                        {position.responsibilities.map((item) => (
                                          <li class="flex items-start">
                                            <div class="w-1 h-1 rounded-full bg-brand-500 mt-2 mr-2 flex-shrink-0"></div>
                                            <span class="text-xs text-gray-700 font-['Montserrat_Variable'] font-light leading-relaxed">
                                              {item}
                                            </span>
                                          </li>
                                        ))}
                                      </ul>
                                    </div>
                                  )}
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
    <div class="relative bg-white/60 backdrop-blur-sm rounded-3xl p-12 md:p-16 lg:p-20 text-center border border-white/50 shadow-lg hover:shadow-xl transition-all duration-500 overflow-hidden">
      <!-- Background Elements -->
      <div class="absolute inset-0 bg-gradient-to-br from-brand-50/40 via-white to-brand-100/30"></div>
      <div class="absolute top-0 right-0 w-64 h-64 bg-gradient-to-bl from-brand-200/20 to-transparent rounded-full blur-3xl"></div>
      <div class="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-tr from-brand-300/15 to-transparent rounded-full blur-2xl"></div>
      
      <!-- Main Content -->
      <div class="relative z-10">
        <!-- Decorative Line -->
        <div class="w-16 h-1 bg-gradient-to-r from-brand-400 to-brand-600 rounded-full mx-auto mb-8"></div>
        
        <h2 class="text-3xl sm:text-4xl lg:text-5xl xl:text-6xl font-['Red_Hat_Display_Variable'] font-light text-gray-900 mb-6 tracking-tight">
          Let's Connect
        </h2>
        
        <p class="text-gray-600 font-['Montserrat_Variable'] font-light mb-12 max-w-3xl mx-auto text-lg sm:text-xl leading-relaxed">
          Ready to turn ideas into impactful solutions? Let's explore how we can collaborate and create something extraordinary together.
        </p>

        <div class="flex flex-col sm:flex-row justify-center items-center gap-6 sm:gap-8">
          <a
            href="/contact/"
            class="group relative inline-flex items-center justify-center w-full sm:w-auto overflow-hidden bg-gradient-to-r from-brand-600 to-brand-700 text-white px-10 py-4 rounded-2xl font-['Montserrat_Variable'] font-medium text-base hover:from-brand-700 hover:to-brand-800 transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-brand-500/25 hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-500"
          >
            <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700"></div>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 group-hover:scale-110 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            <span class="relative z-10">Get in Touch</span>
          </a>
          
          <a
            href="/about/"
            class="group inline-flex items-center justify-center w-full sm:w-auto bg-white/80 backdrop-blur-sm text-gray-700 border-2 border-gray-200/80 px-10 py-4 rounded-2xl font-['Montserrat_Variable'] font-medium text-base hover:bg-white hover:border-brand-300 hover:text-brand-700 transition-all duration-300 shadow-md hover:shadow-lg hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-300"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 group-hover:scale-110 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
            <span>About Me</span>
          </a>
        </div>
        
        <!-- Subtle Divider -->
        <div class="mt-12 pt-8 border-t border-gray-200/50">
          <p class="text-sm text-gray-500 font-['Montserrat_Variable'] font-light">
            Available for freelance projects and full-time opportunities
          </p>
        </div>
      </div>
    </div>
  </div>
  </main>

  <script>
    // Intersection Observer for scroll animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
        }
      });
    }, observerOptions);

    // Add scroll reveal to sections
    document.addEventListener('DOMContentLoaded', () => {
      const sections = document.querySelectorAll('.scroll-reveal');
      sections.forEach(section => {
        observer.observe(section);
      });
    });

    // Re-initialize on page load for Astro
    document.addEventListener('astro:page-load', () => {
      const sections = document.querySelectorAll('.scroll-reveal');
      sections.forEach(section => {
        observer.observe(section);
      });
    });
  </script>
</BaseLayout>

<style>
  /* Animation Classes */
  .fade-in-up {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    will-change: opacity, transform;
  }
  
  .visible.fade-in-up {
    opacity: 1;
    transform: translate(0, 0);
    will-change: auto;
  }

  .timeline-dot {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Smooth Timeline Dot Animations */
  .timeline-pulse-ring {
    animation: smooth-pulse 4s ease-in-out infinite;
  }

  .timeline-main-dot {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .timeline-inner-dot {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .timeline-outer-ring {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .timeline-company-dot {
    animation: gentle-pulse 3s ease-in-out infinite;
  }

  /* Hover Effects for Timeline Dots */
  .timeline-item:hover .timeline-main-dot {
    transform: scale(1.1);
    box-shadow: 0 8px 25px rgba(107, 123, 176, 0.4);
  }

  .timeline-item:hover .timeline-inner-dot {
    transform: scale(0.9);
  }

  .timeline-item:hover .timeline-outer-ring {
    transform: scale(1.25);
    border-color: rgba(255, 255, 255, 0.8);
  }

  .timeline-item:hover .timeline-pulse-ring {
    animation-duration: 2s;
  }

  /* Smooth Keyframe Animations */
  @keyframes smooth-pulse {
    0%, 100% {
      transform: scale(1);
      opacity: 0.6;
    }
    50% {
      transform: scale(1.2);
      opacity: 0.2;
    }
  }

  @keyframes gentle-pulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.7;
      transform: scale(1.05);
    }
  }

  .timeline-item-container:hover .timeline-dot {
    transform: scale(1.1);
    animation: pulse 1.5s infinite cubic-bezier(0.66, 0, 0, 1);
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(90, 106, 159, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(90, 106, 159, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(90, 106, 159, 0);
    }
  }

  a {
    transition: all 0.2s ease-in-out;
  }

  .social-link {
    position: relative;
    overflow: hidden;
    transition:
      color 0.3s ease,
      background-color 0.3s ease;
  }

  .social-link::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: radial-gradient(
      circle,
      transparent 70%,
      rgba(255, 255, 255, 0.3) 100%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .social-link:hover::after {
    opacity: 1;
  }

  .shine-effect {
    position: relative;
    overflow: hidden;
  }

  .shine-effect::before {
    content: "";
    position: absolute;
    top: 0;
    left: -75%;
    width: 50%;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.5) 50%,
      rgba(255, 255, 255, 0) 100%
    );
    transform: skewX(-25deg);
    transition: all 0.7s ease;
  }

  .shine-effect:hover::before {
    left: 125%;
  }

  .md\:w-1\/3 > div {
    transition: box-shadow 0.3s ease-in-out;
  }
  .md\:w-1\/3 > div:hover {
    box-shadow:
      0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1);
  }

  .list-disc li {
    word-break: break-word;
  }

  .description-truncate {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* Staggered animation delays */
  .animate-on-scroll:nth-child(odd) { transition-delay: 0.1s; }
  .animate-on-scroll:nth-child(even) { transition-delay: 0.2s; }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .fade-in-up {
      opacity: 1 !important;
      transform: none !important;
      transition: none !important;
      animation: none !important;
    }
    .social-link,
    .timeline-item-container,
    .timeline-pulse-ring,
    .timeline-company-dot {
      transition: none !important;
      animation: none !important;
    }
    .social-link:hover,
    .timeline-item-container:hover *,
    .timeline-item:hover * {
      transform: none !important;
      animation: none !important;
    }
  }
</style>

<script>
  function scrollObserver() {
    try {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            // Remove will-change after animation completes
            setTimeout(() => {
              (entry.target as HTMLElement).style.willChange = 'auto';
            }, 400);
          }
        });
      }, {
        threshold: 0.15,
        rootMargin: '0px 0px -30px 0px'
      });

      // Use requestAnimationFrame to batch DOM operations
      requestAnimationFrame(() => {
        document.querySelectorAll('.animate-on-scroll').forEach(element => {
          element.classList.remove('visible');
          observer.observe(element);
        });
      });
    } catch (error) {
      console.error('Animation observer error:', error);
      // Fallback: show all content immediately
      requestAnimationFrame(() => {
        document.querySelectorAll('.animate-on-scroll').forEach(element => {
          element.classList.add('visible');
          (element as HTMLElement).style.willChange = 'auto';
        });
      });
    }
  }

  function ensureContentVisibility() {
    setTimeout(() => {
      document.querySelectorAll('.animate-on-scroll').forEach(element => {
        if (!element.classList.contains('visible')) {
          element.classList.add('visible');
        }
      });
    }, 1500);
  }

  // Use passive event listeners for better performance
  document.addEventListener('DOMContentLoaded', scrollObserver, { passive: true });
  document.addEventListener('astro:page-load', scrollObserver, { passive: true });
  
  // Delay ensureContentVisibility to reduce initial load impact
  setTimeout(ensureContentVisibility, 100);
</script>
