---
import BaseLayout from "../../layouts/base_layout.astro";
import "../../styles/global.css";
import Lightbox from "../../components/gallery/lightbox.astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import { Schema } from "astro-seo-schema";
import type { ImageObject as SchemaImageObject } from "schema-dts"; // Import type

// Define interfaces needed for profile data
interface Social { platform: string; url: string; }
interface ProfileData { name: string; socials: Social[]; /* Add other fields if needed */ }

// Fetch profile data
const profileEntry = await getCollection("profile");
const profile = profileEntry[0].data as ProfileData;

export async function getStaticPaths() {
  const galleries = await getCollection("gallery");
  return galleries.map((gallery) => ({
    params: { slug: gallery.data.directory },
    props: { gallery },
  }));
}

const { gallery } = Astro.props;

const { title, description, featured_image, featured_image_alt, tags, images } =
  gallery.data;

const page_info = {
  title: `${title} - ${profile.name}`, // Use profile name
  description: description,
  image: featured_image.src, // Use .src for Schema
  keywords: `photography, ${title.toLowerCase()}, portfolio, ${profile.name}`, // Use profile name
};

// Prepare image array for JSON-LD and explicitly type it
const galleryImageUrls: SchemaImageObject[] =
  images?.map((img) => {
    // Construct the ImageObject ensuring all required fields are present
    const imageObject: SchemaImageObject = {
      "@type": "ImageObject",
      contentUrl: new URL(
        img.src.src, // Assuming img.src has a src property
        Astro.site || "https://rishikc.com",
      ).toString(),
      name: img.caption || img.alt || `${title} image`,
      description: img.caption || img.alt || `Image from ${title} gallery`,
      // Potentially add 'thumbnailUrl' or other properties if available/needed
    };
    return imageObject;
  }) || [];

const pageUrl = new URL(
  Astro.url.pathname,
  Astro.site || "https://rishikc.com",
).toString();
---

<BaseLayout page_info={page_info}>
  <!-- ImageGallery JSON-LD Schema -->
  <Schema
    slot="head"
    item={{
      "@context": "https://schema.org",
      "@type": "ImageGallery",
      headline: title,
      description: description,
      image: featured_image.src, // Ensure this is a URL string
      author: {
        "@type": "Person",
        name: profile.name, // Use profile name
        url: "https://rishikc.com",
        sameAs: profile.socials.map((social: Social) => social.url), // Use fetched socials
      },
      mainEntityOfPage: {
        "@type": "WebPage",
        "@id": pageUrl,
      },
      keywords: tags?.join(", "),
      associatedMedia: galleryImageUrls, // Use the explicitly typed array
    }}
  />
  <main
    class="font-['Red_Hat_Display_Variable'] min-h-screen bg-gray-50 dark:bg-gray-900"
  >
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-20"> {/* Adjusted padding */}
      <a
        href="/gallery/"
        class="inline-flex items-center text-brand-700 dark:text-brand-300 hover:text-brand-900 dark:hover:text-brand-100 mb-12 sm:mb-16 group text-sm tracking-widest uppercase transition-colors duration-300 font-medium"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-4 w-4 mr-3 group-hover:-translate-x-1 transition-transform"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Back to Gallery
      </a>

      <div class="max-w-3xl mx-auto text-center mb-16 sm:mb-20"> {/* Adjusted margin */}
        <h1
          transition:name={`${gallery.id}-title`}
          class="text-4xl sm:text-5xl lg:text-6xl font-light text-brand-900 dark:text-white mb-6 sm:mb-8 tracking-tight leading-tight"
        >
          {title}
        </h1>
        <p
          transition:name={`${gallery.id}-description`}
          class="text-brand-700 dark:text-gray-300 text-lg sm:text-xl leading-relaxed font-light max-w-2xl mx-auto"
        >
          {description}
        </p>
        {
          tags && tags.length > 0 && (
            <div class="flex flex-wrap gap-2 sm:gap-3 justify-center mt-8 sm:mt-10"> {/* Adjusted gap and margin */}
              {tags.map((tag) => (
                <span
                  transition:name={`${gallery.id}-${tag}`}
                  class="text-xs bg-brand-950/10 text-brand-950 px-5 py-2 rounded-full tracking-wider uppercase font-medium hover:bg-brand-950/20 transition-colors duration-300 shadow-sm"
                >
                  {tag}
                </span>
              ))}
            </div>
          )
        }
      </div>

      {/* Masonry Grid Container */}
      <div class="columns-1 sm:columns-2 lg:columns-3 gap-4 sm:gap-6 space-y-4 py-4 sm:space-y-6">
        {
          images.map((image, index) => (
            // Add 'break-inside-avoid' to prevent items from breaking across columns
            <div class="gallery-image group relative aspect-auto overflow-hidden rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 break-inside-avoid">
              <Image
                src={image.src}
                alt={image.alt || `${title} photo ${index + 1}`}
                data-caption={image.caption}
                class="w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105"
                widths={[400, 800, 1200]}
                sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                <button
                  class="text-white p-3 rounded-full bg-black/40 hover:bg-black/60 transition-all duration-300 transform scale-75 opacity-0 group-hover:scale-100 group-hover:opacity-100 hover:scale-110 shadow-lg backdrop-blur-sm"
                  onclick="openLightbox(this.closest('.gallery-image').querySelector('img'))"
                  aria-label="View image in fullscreen"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 sm:h-6 sm:w-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    stroke-width="1.5"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 10m-7 0a7 7 0 1014 0 7 7 0 00-14 0z"
                    />
                  </svg>
                </button>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </main>
  <Lightbox />
</BaseLayout>
