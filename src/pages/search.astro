---
// Now SSG compatible - no server-side query parameter handling
import { getCollection } from "astro:content";
import Layout from "../layouts/base_layout.astro";
import { Schema } from "astro-seo-schema";

const page_info = {
    title: "Search | Rishi Chawda",
    description: "Search articles, gallery, and content on Rishi Chawda's website",
    keywords: "search, articles, gallery, photography, development",
};

// Get all content collections to create search index
const allArticles = await getCollection("articles");
const allGallery = await getCollection("gallery");
const allQuotes = await getCollection("quotes");

// Format date
function formatDate(date: Date): string {
    return new Date(date).toLocaleDateString("en-US", {
        day: "numeric",
        month: "long",
        year: "numeric",
    });
}

// Create search index for client-side search
const searchIndex = {
    articles: allArticles.map(article => ({
        id: article.id,
        title: article.data.title,
        description: article.data.description,
        subtitle: article.data.subtitle || "",
        keywords: article.data.keywords || "",
        tags: article.data.tags || [],
        category: article.data.category || "",
        path: article.data.path,
        date: article.data.date.toISOString(),
        hero_image: article.data.hero_image,
        hero_image_alt: article.data.hero_image_alt || article.data.title,
        searchableContent: [
            article.data.title,
            article.data.description,
            article.data.subtitle,
            article.data.keywords,
            article.data.tags.join(" "),
            article.data.category,
            article.body, // Added article body to searchable content
        ].filter(Boolean).join(" ").toLowerCase()
    })),
    gallery: allGallery.map(gallery => ({
        id: gallery.id,
        title: gallery.data.title,
        description: gallery.data.description || "",
        location: gallery.data.location || "",
        tags: gallery.data.tags || [],
        directory: gallery.data.directory,
        featured_image: gallery.data.featured_image,
        featured_image_alt: gallery.data.featured_image_alt || gallery.data.title,
        images_count: gallery.data.images?.length || 0,
        searchableContent: [
            gallery.data.title,
            gallery.data.description,
            gallery.data.location,
            gallery.data.tags?.join(" "),
            gallery.data.directory,
        ].filter(Boolean).join(" ").toLowerCase()
    })),
    quotes: allQuotes[1]?.data ? allQuotes[1].data.map((quote: any, index: number) => ({
        id: `quote-${index}`,
        quote: quote.quote,
        info: quote.info || "",
        searchableContent: [quote.quote, quote.info].filter(Boolean).join(" ").toLowerCase()
    })) : []
};

// Get current page URL for schema
const pageUrl = new URL(
  Astro.url.pathname,
  Astro.site || "https://rishikc.com",
).toString();
---

<Layout page_info={page_info}>
    <!-- SearchResultsPage JSON-LD Schema -->
    <Schema
        slot="head"
        item={{
            "@context": "https://schema.org",
            "@type": "SearchResultsPage",
            name: page_info.title,
            description: page_info.description,
            url: pageUrl,
            potentialAction: [
                {
                    "@type": "SearchAction",
                    target: `${new URL(Astro.url.pathname, Astro.site || "https://rishikc.com").toString()}?q={search_term_string}`,
                    "query-input": "required name=search_term_string"
                }
            ]
        }}
    />

    <main class="font-['Red_Hat_Display_Variable'] min-h-screen bg-gradient-to-br from-brand-50/30 via-white to-brand-100/20">
        <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12 sm:py-20 pt-8 sm:pt-12">
            <!-- Header -->
            <div class="mb-16 sm:mb-20 text-center">
                <a
                    href="/"
                    class="inline-flex items-center text-brand-600 hover:text-brand-800 mb-8 group text-sm sm:text-[15px] tracking-[0.15em] sm:tracking-[0.2em] uppercase transition-all duration-300 font-medium hover:gap-3 gap-2"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4 transition-transform duration-300 group-hover:-translate-x-1"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        stroke-width="2"
                    >
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
                    </svg>
                    Back to Home
                </a>

                <div class="max-w-4xl mx-auto">
                    <h1 class="text-4xl sm:text-5xl lg:text-6xl font-bold text-brand-900 mb-6 tracking-[-0.025em] leading-tight">
                        <span id="page-title" class="bg-gradient-to-r from-brand-900 via-brand-800 to-brand-700 bg-clip-text text-transparent">Search</span>
                    </h1>
                    
                    <p id="search-results-info" class="text-lg sm:text-xl leading-relaxed font-medium max-w-3xl mx-auto font-['Montserrat_Variable'] hidden flex flex-col sm:flex-row items-center justify-center text-center gap-x-2 gap-y-1 bg-brand-100/60 p-4 rounded-xl shadow">
                        <span class="inline-flex items-center gap-1.5 text-brand-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-brand-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span>
                                <span id="results-count" class="font-semibold text-brand-800">0</span> result<span id="results-plural">s</span> found
                            </span>
                        </span>
                        <span class="text-brand-600 font-normal">
                            for "<span class="font-semibold text-brand-800" id="search-query-display"></span>"
                        </span>
                    </p>
                    
                    <p id="search-description" class="text-brand-600 text-xl sm:text-2xl leading-relaxed font-normal max-w-3xl mx-auto font-['Montserrat_Variable']">
                        Discover articles, photography galleries, and inspiring quotes
                    </p>
                </div>
            </div>

            <!-- Search Form -->
            <div class="mb-16 sm:mb-20">
                <div class="max-w-2xl mx-auto">
                    <form class="relative group" id="search-form">
                        <div class="absolute inset-0 bg-gradient-to-r from-brand-400/20 to-brand-600/20 rounded-2xl blur opacity-0 group-focus-within:opacity-100 transition-opacity duration-300"></div>
                        <div class="relative">
                            <input
                                type="text"
                                name="q"
                                placeholder="Search articles, gallery, quotes..."
                                class="w-full px-8 py-6 text-lg sm:text-xl rounded-2xl border-2 border-brand-200/50 bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-brand-500/20 focus:border-brand-500 focus:outline-none transition-all duration-300 font-['Montserrat_Variable'] text-brand-900 placeholder-brand-400 shadow-lg shadow-brand-100/50"
                                autocomplete="off"
                                id="search-input"
                            />
                            <div class="absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-3">
                                <kbd class="hidden sm:inline-flex items-center px-2 py-1 text-xs font-mono text-brand-500 bg-brand-100 rounded border border-brand-200">
                                    Press / to focus
                                </kbd>
                                <button
                                    type="submit"
                                    class="bg-gradient-to-r from-brand-600 to-brand-700 hover:from-brand-700 hover:to-brand-800 text-white p-3 rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
                                    aria-label="Search"
                                >
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="h-6 w-6"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                        stroke-width="2"
                                    >
                                        <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-6-6m2-5a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- No Results Message -->
            <div id="no-results" class="text-center py-20 hidden">
                <div class="max-w-md mx-auto">
                    <div class="text-8xl mb-8 opacity-60">üîç</div>
                    <h2 class="text-3xl font-bold text-brand-900 mb-6">No results found</h2>
                    <p class="text-brand-600 font-['Montserrat_Variable'] mb-12 text-lg leading-relaxed">
                        We couldn't find what you're looking for. Try different keywords or explore our content sections below.
                    </p>
                    <div class="flex flex-col sm:flex-row justify-center gap-4">
                        <a href="/articles/" class="bg-gradient-to-r from-brand-600 to-brand-700 hover:from-brand-700 hover:to-brand-800 text-white px-6 py-3 sm:px-8 sm:py-4 rounded-xl transition-all duration-200 font-medium shadow-lg hover:shadow-xl transform hover:scale-105 whitespace-nowrap text-sm sm:text-base">
                            Browse Articles
                        </a>
                        <a href="/gallery/" class="bg-white hover:bg-brand-50 text-brand-700 border-2 border-brand-200 hover:border-brand-300 px-6 py-3 sm:px-8 sm:py-4 rounded-xl transition-all duration-200 font-medium shadow-lg hover:shadow-xl transform hover:scale-105 whitespace-nowrap text-sm sm:text-base">
                            View Gallery
                        </a>
                        <a href="/reads/" class="bg-white hover:bg-brand-50 text-brand-700 border-2 border-brand-200 hover:border-brand-300 px-6 py-3 sm:px-8 sm:py-4 rounded-xl transition-all duration-200 font-medium shadow-lg hover:shadow-xl transform hover:scale-105 whitespace-nowrap text-sm sm:text-base">
                            Explore Quotes
                        </a>
                    </div>
                </div>
            </div>

            <!-- Search Results Container -->
            <div id="search-results" class="space-y-16 hidden">
                <!-- Articles Results -->
                <section id="articles-section" class="hidden">
                    <div class="flex items-center justify-between mb-8">
                        <h2 class="text-3xl font-bold text-brand-900 flex items-center">
                            <div class="w-12 h-12 bg-gradient-to-r from-brand-500 to-brand-600 rounded-xl flex items-center justify-center mr-4">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
                                </svg>
                            </div>
                            Articles
                        </h2>
                        <span class="bg-brand-100 text-brand-700 px-4 py-2 rounded-full text-lg font-semibold">
                            <span id="articles-count">0</span>
                        </span>
                    </div>
                    <div id="articles-container" class="space-y-6">
                        <!-- Articles will be populated by JavaScript -->
                    </div>
                </section>

                <!-- Gallery Results -->
                <section id="gallery-section" class="hidden">
                    <div class="flex items-center justify-between mb-8">
                        <h2 class="text-3xl font-bold text-brand-900 flex items-center">
                            <div class="w-12 h-12 bg-gradient-to-r from-emerald-500 to-emerald-600 rounded-xl flex items-center justify-center mr-4">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m2.25 15.75 5.159-5.159a2.25 2.25 0 0 1 3.182 0l5.159 5.159m-1.5-1.5 1.409-1.409a2.25 2.25 0 0 1 3.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 0 0 1.5-1.5V6a1.5 1.5 0 0 0-1.5-1.5H3.75A1.5 1.5 0 0 0 2.25 6v12a1.5 1.5 0 0 0 1.5 1.5Zm10.5-11.25h.008v.008h-.008V8.25Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z" />
                                </svg>
                            </div>
                            Photography
                        </h2>
                        <span class="bg-emerald-100 text-emerald-700 px-4 py-2 rounded-full text-lg font-semibold">
                            <span id="gallery-count">0</span>
                        </span>
                    </div>
                    <div id="gallery-container" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8">
                        <!-- Gallery items will be populated by JavaScript -->
                    </div>
                </section>

                <!-- Quotes Results -->
                <section id="quotes-section" class="hidden">
                    <div class="flex items-center justify-between mb-8">
                        <h2 class="text-3xl font-bold text-brand-900 flex items-center">
                            <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl flex items-center justify-center mr-4">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z" />
                                </svg>
                            </div>
                            Quotes
                        </h2>
                        <span class="bg-purple-100 text-purple-700 px-4 py-2 rounded-full text-lg font-semibold">
                            <span id="quotes-count">0</span>
                        </span>
                    </div>
                    <div id="quotes-container" class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <!-- Quotes will be populated by JavaScript -->
                    </div>
                </section>
            </div>
        </div>
    </main>

    <!-- Pass search index to JavaScript -->
    <script define:vars={{ searchIndex }}>
        window.searchIndex = searchIndex;
    </script>
</Layout>

<style>
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>

<script>
    import { 
        initializeSearch, 
        type SearchRenderer, 
        type SearchResults, 
        type ArticleItem, 
        type GalleryItem, 
        type QuoteItem 
    } from '../utils/search.ts';
    
    /**
     * SEARCH STYLES CONFIGURATION
     * 
     * This centralized configuration makes it easy to maintain and customize
     * the styling of search result elements. To modify styles:
     * 
     * 1. Update class strings in the relevant section below
     * 2. Add new style properties to any section as needed
     * 3. Dimensions can be adjusted in the 'dimensions' section
     * 
     * Structure:
     * - article: Styles for article search results
     * - gallery: Styles for gallery search results  
     * - quote: Styles for quote search results
     * - dimensions: Image dimensions and other size constraints
     */
    const SEARCH_STYLES = {
        article: {
            container: 'bg-white/95 backdrop-blur-sm rounded-2xl p-6 sm:p-8 border border-brand-200/50 hover:shadow-2xl hover:shadow-brand-100/50 transition-all duration-300 transform hover:-translate-y-1 group',
            link: 'block',
            flexWrapper: 'flex flex-col sm:flex-row gap-6 sm:gap-8 sm:min-h-[1px]',
            imageContainer: 'flex-shrink-0 w-full sm:w-auto',
            image: 'rounded-xl object-cover w-full h-48 sm:h-full sm:w-[140px]',
            contentContainer: 'flex-1 min-w-0',
            title: 'text-xl sm:text-2xl font-bold text-brand-900 mb-3 group-hover:text-brand-700 transition-colors line-clamp-2',
            description: 'text-brand-600 font-[\'Montserrat_Variable\'] text-sm sm:text-base mb-4 sm:mb-6 line-clamp-3 leading-relaxed',
            metaContainer: 'flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0',
            date: 'text-brand-500 text-sm font-[\'Montserrat_Variable\'] font-medium',
            tagsContainer: 'flex gap-2 flex-wrap',
            tag: 'bg-gradient-to-r from-brand-100 to-brand-50 text-brand-700 px-3 py-1 rounded-full text-sm font-medium border border-brand-200/50'
        },
        gallery: {
            container: 'bg-white/95 backdrop-blur-sm rounded-2xl overflow-hidden border border-brand-200/50 hover:shadow-2xl hover:shadow-brand-100/50 transition-all duration-300 transform hover:-translate-y-1 group',
            link: 'block h-full',
            imageContainer: 'aspect-[4/3] overflow-hidden',
            image: 'w-full h-full object-cover group-hover:scale-110 transition-transform duration-500',
            contentContainer: 'p-6',
            title: 'text-xl font-bold text-brand-900 mb-3 group-hover:text-brand-700 transition-colors line-clamp-2',
            description: 'text-brand-600 font-[\'Montserrat_Variable\'] text-sm mb-4 line-clamp-2 leading-relaxed',
            metaContainer: 'flex items-center justify-between text-sm',
            location: 'text-brand-500 font-[\'Montserrat_Variable\'] font-medium flex items-center gap-1',
            count: 'text-brand-500 font-[\'Montserrat_Variable\'] font-medium bg-brand-50 px-2 py-1 rounded-full'
        },
        quote: {
            container: 'bg-gradient-to-br from-white/95 to-brand-50/30 backdrop-blur-sm rounded-2xl p-8 border border-brand-200/50 hover:shadow-2xl hover:shadow-brand-100/50 transition-all duration-300 transform hover:-translate-y-1 relative overflow-hidden',
            text: 'text-brand-800 font-[\'Montserrat_Variable\'] text-lg italic mb-6 relative z-10 leading-relaxed',
            cite: 'text-brand-600 font-semibold relative z-10',
            decoration: 'absolute top-4 right-4 text-6xl text-brand-200/50 leading-none'
        },
        dimensions: {
            article: { image: { width: 140, height: 100 } },
            gallery: { image: { width: 400, height: 300 } }
        }
    };

    /**
     * Helper function to create DOM elements with classes and attributes
     * This reduces boilerplate and makes the code more maintainable
     * 
     * @param tag - HTML tag name (e.g., 'div', 'img', 'a')
     * @param className - CSS classes to apply to the element
     * @param attributes - Key-value pairs of attributes to set
     * @returns HTMLElement with applied classes and attributes
     */
    function createElement(tag: string, className?: string, attributes?: Record<string, string | number>): HTMLElement {
        const element = document.createElement(tag);
        if (className) element.className = className;
        if (attributes) {
            Object.entries(attributes).forEach(([key, value]) => {
                element.setAttribute(key, value.toString());
            });
        }
        return element;
    }

    // Create SearchRenderer implementation
    class DOMSearchRenderer implements SearchRenderer {
        private pageTitle!: HTMLElement;
        private searchResultsInfo!: HTMLElement;
        private searchDescription!: HTMLElement;
        private noResultsEl!: HTMLElement;
        private searchResults!: HTMLElement;
        
        // Result containers
        private articlesSection!: HTMLElement;
        private articlesContainer!: HTMLElement;
        private articlesCount!: HTMLElement;
        
        private gallerySection!: HTMLElement;
        private galleryContainer!: HTMLElement;
        private galleryCount!: HTMLElement;
        
        private quotesSection!: HTMLElement;
        private quotesContainer!: HTMLElement;
        private quotesCount!: HTMLElement;
        
        private resultsCount!: HTMLElement;
        private resultsPlural!: HTMLElement;
        private searchQueryDisplay!: HTMLElement;
        
        constructor() {
            this.initializeElements();
        }
        
        private initializeElements(): void {
            // Check if elements exist, otherwise wait for them to be available
            const checkElements = () => {
                if (!document.getElementById('page-title')) {
                    // Elements not ready yet, try again in a moment
                    setTimeout(checkElements, 50);
                    return;
                }
                
                this.pageTitle = document.getElementById('page-title') as HTMLElement;
                this.searchResultsInfo = document.getElementById('search-results-info') as HTMLElement;
                this.searchDescription = document.getElementById('search-description') as HTMLElement;
                this.noResultsEl = document.getElementById('no-results') as HTMLElement;
                this.searchResults = document.getElementById('search-results') as HTMLElement;
                
                // Result containers
                this.articlesSection = document.getElementById('articles-section') as HTMLElement;
                this.articlesContainer = document.getElementById('articles-container') as HTMLElement;
                this.articlesCount = document.getElementById('articles-count') as HTMLElement;
                
                this.gallerySection = document.getElementById('gallery-section') as HTMLElement;
                this.galleryContainer = document.getElementById('gallery-container') as HTMLElement;
                this.galleryCount = document.getElementById('gallery-count') as HTMLElement;
                
                this.quotesSection = document.getElementById('quotes-section') as HTMLElement;
                this.quotesContainer = document.getElementById('quotes-container') as HTMLElement;
                this.quotesCount = document.getElementById('quotes-count') as HTMLElement;
                
                this.resultsCount = document.getElementById('results-count') as HTMLElement;
                this.resultsPlural = document.getElementById('results-plural') as HTMLElement;
                this.searchQueryDisplay = document.getElementById('search-query-display') as HTMLElement;
                
                // Re-run initialization if needed
                if (window.location.search.includes('q=')) {
                    const searchInstance = window.clientSideSearchInstance;
                    if (searchInstance) {
                        searchInstance.initializeFromURL();
                    }
                }
            };
            
            // Start checking for elements
            checkElements();
        }
        
        showDefaultState(): void {
            this.pageTitle.textContent = 'Search';
            this.searchResultsInfo.classList.add('hidden');
            this.searchDescription.classList.remove('hidden');
            this.noResultsEl.classList.add('hidden');
            this.searchResults.classList.add('hidden');
            this.hideAllSections();
        }
        
        displayResults(query: string, results: SearchResults): void {
            const { articles, gallery, quotes } = results;
            const totalResults = articles.length + gallery.length + quotes.length;
            
            // Update header
            this.pageTitle.textContent = 'Search Results';
            this.searchQueryDisplay.textContent = query;
            this.resultsCount.textContent = totalResults.toString();
            this.resultsPlural.textContent = totalResults === 1 ? '' : 's';
            this.searchResultsInfo.classList.remove('hidden');
            this.searchDescription.classList.add('hidden');
            
            if (totalResults === 0) {
                this.noResultsEl.classList.remove('hidden');
                this.searchResults.classList.add('hidden');
                return;
            }
            
            // Show results
            this.noResultsEl.classList.add('hidden');
            this.searchResults.classList.remove('hidden');
            
            this.displayArticles(articles);
            this.displayGallery(gallery);
            this.displayQuotes(quotes);
        }
        
        hideAllSections(): void {
            this.articlesSection.classList.add('hidden');
            this.gallerySection.classList.add('hidden');
            this.quotesSection.classList.add('hidden');
        }
        
        displayArticles(articles: ArticleItem[]): void {
            if (articles.length === 0) {
                this.articlesSection.classList.add('hidden');
                return;
            }
            
            this.articlesCount.textContent = articles.length.toString();
            this.articlesSection.classList.remove('hidden');
            
            // Clear existing content
            this.articlesContainer.innerHTML = '';
            
            // Create articles using DOM methods to prevent XSS
            articles.forEach((article: ArticleItem) => {
                const articleEl = this.createArticleElement(article);
                this.articlesContainer.appendChild(articleEl);
            });
        }
        
        displayGallery(gallery: GalleryItem[]): void {
            if (gallery.length === 0) {
                this.gallerySection.classList.add('hidden');
                return;
            }
            
            this.galleryCount.textContent = gallery.length.toString();
            this.gallerySection.classList.remove('hidden');
            
            // Clear existing content
            this.galleryContainer.innerHTML = '';
            
            // Create gallery items using DOM methods to prevent XSS
            gallery.forEach((item: GalleryItem) => {
                const galleryEl = this.createGalleryElement(item);
                this.galleryContainer.appendChild(galleryEl);
            });
        }
        
        displayQuotes(quotes: QuoteItem[]): void {
            if (quotes.length === 0) {
                this.quotesSection.classList.add('hidden');
                return;
            }
            
            this.quotesCount.textContent = quotes.length.toString();
            this.quotesSection.classList.remove('hidden');
            
            // Clear existing content
            this.quotesContainer.innerHTML = '';
            
            // Create quotes using DOM methods to prevent XSS
            quotes.forEach((quote: QuoteItem) => {
                const quoteEl = this.createQuoteElement(quote);
                this.quotesContainer.appendChild(quoteEl);
            });
        }
        
        private createArticleElement(article: ArticleItem): HTMLElement {
            const searchInstance = window.clientSideSearchInstance;
            if (!searchInstance) {
                console.error('Search instance not available for article element creation');
                // Create a fallback element with minimal functionality rather than throwing an error
                const fallbackEl = createElement('article', 'bg-white/80 backdrop-blur-sm rounded-xl p-4 border border-brand-200');
                fallbackEl.textContent = article.title;
                return fallbackEl;
            }
            
            const styles = SEARCH_STYLES.article;
            const dims = SEARCH_STYLES.dimensions.article;
            
            // Create main container
            const articleEl = createElement('article', styles.container);
            
            // Create link wrapper
            const linkEl = createElement('a', styles.link, {
                href: searchInstance.escapeForAttribute(article.path)
            });
            
            // Create flex container
            const flexEl = createElement('div', styles.flexWrapper);
            
            // Create image section
            const imgContainer = createElement('div', styles.imageContainer);
            const imgEl = createElement('img', styles.image, {
                src: searchInstance.escapeForAttribute(article.hero_image.src),
                alt: searchInstance.escapeForAttribute(article.hero_image_alt),
                width: dims.image.width.toString(),
                height: dims.image.height.toString()
            });
            imgContainer.appendChild(imgEl);
            
            // Create content section
            const contentEl = createElement('div', styles.contentContainer);
            
            const titleEl = createElement('h3', styles.title);
            titleEl.textContent = article.title;
            
            const descEl = createElement('p', styles.description);
            descEl.textContent = article.description;
            
            // Create meta section
            const metaEl = createElement('div', styles.metaContainer);
            
            const timeEl = createElement('time', styles.date);
            timeEl.textContent = searchInstance.formatDate(article.date);
            
            const tagsEl = createElement('div', styles.tagsContainer);
            article.tags.slice(0, 3).forEach(tag => {
                const tagEl = createElement('span', styles.tag);
                tagEl.textContent = tag;
                tagsEl.appendChild(tagEl);
            });
            
            // Assemble the structure
            metaEl.appendChild(timeEl);
            metaEl.appendChild(tagsEl);
            
            contentEl.appendChild(titleEl);
            contentEl.appendChild(descEl);
            contentEl.appendChild(metaEl);
            
            flexEl.appendChild(imgContainer);
            flexEl.appendChild(contentEl);
            
            linkEl.appendChild(flexEl);
            articleEl.appendChild(linkEl);
            
            return articleEl;
        }
        
        private createGalleryElement(item: GalleryItem): HTMLElement {
            const searchInstance = window.clientSideSearchInstance;
            if (!searchInstance) {
                console.error('Search instance not available for gallery element creation');
                // Create a fallback element with minimal functionality rather than throwing an error
                const fallbackEl = createElement('article', 'bg-white/80 backdrop-blur-sm rounded-xl p-4 border border-brand-200');
                fallbackEl.textContent = item.title;
                return fallbackEl;
            }
            
            const styles = SEARCH_STYLES.gallery;
            const dims = SEARCH_STYLES.dimensions.gallery;
            
            // Create main container
            const articleEl = createElement('article', styles.container);
            
            // Create link wrapper
            const linkEl = createElement('a', styles.link, {
                href: `/gallery/${searchInstance.escapeForAttribute(item.directory)}/`
            });
            
            // Create image section
            const imgContainerEl = createElement('div', styles.imageContainer);
            const imgEl = createElement('img', styles.image, {
                src: searchInstance.escapeForAttribute(item.featured_image.src),
                alt: searchInstance.escapeForAttribute(item.featured_image_alt),
                width: dims.image.width.toString(),
                height: dims.image.height.toString()
            });
            imgContainerEl.appendChild(imgEl);
            
            // Create content section
            const contentEl = createElement('div', styles.contentContainer);
            
            const titleEl = createElement('h3', styles.title);
            titleEl.textContent = item.title;
            contentEl.appendChild(titleEl);
            
            // Add description if available
            if (item.description) {
                const descEl = createElement('p', styles.description);
                descEl.textContent = item.description;
                contentEl.appendChild(descEl);
            }
            
            // Create meta section
            const metaEl = createElement('div', styles.metaContainer);
            
            // Add location or empty span for layout
            if (item.location) {
                const locationEl = createElement('span', styles.location);
                locationEl.textContent = `üìç ${item.location}`;
                metaEl.appendChild(locationEl);
            } else {
                metaEl.appendChild(createElement('span'));
            }
            
            // Add photo count
            const countEl = createElement('span', styles.count);
            countEl.textContent = `${item.images_count} photos`;
            metaEl.appendChild(countEl);
            
            // Assemble the structure
            contentEl.appendChild(metaEl);
            
            linkEl.appendChild(imgContainerEl);
            linkEl.appendChild(contentEl);
            articleEl.appendChild(linkEl);
            
            return articleEl;
        }
        
        private createQuoteElement(quote: QuoteItem): HTMLElement {
            const styles = SEARCH_STYLES.quote;
            
            // Create main container
            const blockquoteEl = createElement('blockquote', styles.container);
            
            // Add decorative quote mark
            const decorationEl = createElement('div', styles.decoration);
            decorationEl.innerHTML = '"';
            blockquoteEl.appendChild(decorationEl);
            
            // Create quote text
            const quoteTextEl = createElement('p', styles.text);
            quoteTextEl.textContent = `"${quote.quote}"`;
            blockquoteEl.appendChild(quoteTextEl);
            
            // Add citation if available
            if (quote.info) {
                const citeEl = createElement('cite', styles.cite);
                citeEl.textContent = `‚Äî ${quote.info}`;
                blockquoteEl.appendChild(citeEl);
            }
            
            return blockquoteEl;
        }
    }
    
    // Initialize search when page loads
    document.addEventListener('DOMContentLoaded', () => {
        // Make sure search index is available first
        if (window.searchIndex) {
            const renderer = new DOMSearchRenderer();
            initializeSearch(renderer);
        } else {
            console.warn('Search index not available on DOMContentLoaded, will retry');
            // If search index isn't available yet, check again after a short delay
            setTimeout(() => {
                if (window.searchIndex) {
                    const renderer = new DOMSearchRenderer();
                    initializeSearch(renderer);
                } else {
                    console.error('Search index still not available after delay');
                }
            }, 100);
        }
    });
    
    // Also initialize on Astro page load for SPA navigation
    document.addEventListener('astro:page-load', () => {
        const renderer = new DOMSearchRenderer();
        initializeSearch(renderer);
    });
</script>
